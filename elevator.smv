MODULE main
	VAR
		floor1 : floor(1, moving, location, open, request);
		floor2 : floor(2, moving, location, open, request);
		floor3 : floor(3, moving, location, open, request);
		elev : elevator(moving, location, open, request);
		moving : {up, down, idle};
		location : {first, first-and-half, second, second-and-half, third};
		request : {uprequest3, uprequest2, downrequest2, downrequest1, norequest};
		open : boolean;

	ASSIGN
		init(moving) := idle;
		init(location) := first;
		init(open) := TRUE;
		init(request) := norequest;

		next(request) :=
			case
				(floor1.button = TRUE) & (request = norequest) : downrequest1;
				(floor1.button = TRUE) & (request = downrequest2) : downrequest1;

				(floor2.button = TRUE) & (request = norequest) & (location = first) : uprequest2;
				(floor2.button = TRUE) & (request = norequest) & (location = third) : downrequest2;

				(floor3.button = TRUE) & (request = norequest) : uprequest3;
				(floor3.button = TRUE) & (request = uprequest2) : uprequest3;

				(location = first-and-half) & (moving = down) & (request = downrequest1) : norequest; --!!!--
				(location = first-and-half) & (moving = up) & (request = uprequest2) | (location = second-and-half) & (moving = down) & (request = downrequest2) : norequest;
				(location = second-and-half) & (moving = up) & (request = uprequest3) : norequest;

				(elev.button1 = TRUE) & (request = norequest) : downrequest1;
				(elev.button1 = TRUE) & (request = downrequest2) : downrequest1;

				(elev.button2 = TRUE) & (request = norequest) & (location = first) : uprequest2;
				(elev.button2 = TRUE) & (request = norequest) & (location = third) : downrequest2;

				(elev.button3 = TRUE) & (request = norequest) : uprequest3;
				(elev.button3 = TRUE) & (request = uprequest2) : uprequest3;

				TRUE : request;
			esac;

	--liveness
	SPEC AG(floor1.button = TRUE -> AF(location = first & moving = idle & open = TRUE))
	SPEC AG(floor2.button = TRUE -> AF(location = second & moving = idle & open = TRUE))
	SPEC AG(floor3.button = TRUE -> AF(location = third & moving = idle & open = TRUE))
	SPEC AG(elev.button1 = TRUE -> AF(location = first & moving = idle & open = TRUE))
	SPEC AG(elev.button2 = TRUE -> AF(location = second & moving = idle & open = TRUE))
	SPEC AG(elev.button3 = TRUE -> AF(location = third & moving = idle & open = TRUE))

	--never move with door open
	SPEC AG((moving = up) | (moving = down) -> (open = FALSE))

	--door remains open until a request
	SPEC AG(request = norequest -> open = TRUE)

	-- It takes exactly 2 time units for the elevator to move between two consecutive floors.
	SPEC AG(location = first & moving = up -> AX(location = first-and-half) & AX(AX(location = second)))
	SPEC AG(location = second & moving = up -> AX(location = second-and-half) & AX(AX(location = third)))
	SPEC AG(location = third & moving = down -> AX(location = second-and-half) & AX(AX(location = second)))
	SPEC AG(location = second & moving = down -> AX(location = first-and-half) & AX(AX(location = first)))

	--If there are no requests for another floor, the elevator should not move
	SPEC AG((request = norequest -> moving = idle))
	SPEC AG(((request = norequest & location = first) -> AX(location = first)) & ((request = norequest & location = second) -> AX(location = second)) & ((request = norequest & location = third) -> AX(location = third)))

	--cannot change direction between floors
	SPEC AG(location = first-and-half & moving = up -> AX(location = second))
	SPEC AG(location = first-and-half & moving = down -> AX(location = first))
	SPEC AG(location = second-and-half & moving = up -> AX(location = third))
	SPEC AG(location = second-and-half & moving = down -> AX(location = second))

	--The buttons in the elevator can always be pushed when there is no request
	SPEC AG((location = first) & (request = norequest) -> EX(elev.button2 = TRUE | elev.button3 = TRUE))
	SPEC AG((location = second) & (request = norequest) -> EX(elev.button1 = TRUE | elev.button3 = TRUE))
	SPEC AG((location = third) & (request = norequest) -> EX(elev.button1 = TRUE | elev.button2 = TRUE))

	--The buttons in the floor can always be pushed if the elevator is not at that floor and the elevator will not arrive that floor in the next state.
	SPEC AG(!(location = first) & !((location = first-and-half) & (moving = down)) -> EX(floor1.button = TRUE))
	SPEC AG(!(location = second) & !((location = first-and-half) & (moving = up)) & !((location = second-and-half) & (moving = down)) -> EX(floor2.button = TRUE))
	SPEC AG(!(location = third) & !((location = second-and-half) & (moving = up)) -> EX(floor3.button = TRUE))

	SPEC EF(floor1.button = TRUE & floor2.button = TRUE & floor3.button = TRUE)


MODULE floor(level, moving, location, open, request)
	VAR
		button : boolean;

	ASSIGN
		init(button) := FALSE;
		next(button) :=
			case
				(level = 1) & (button = FALSE) & ((location = first) & (moving = idle) | (location = first-and-half) & (moving = down)) : FALSE;
				(level = 1) & (button = FALSE) : {TRUE, FALSE};
				(level = 1) & (button = TRUE) & (location = first-and-half) & (moving = down) : FALSE;
				(level = 1) & (button = TRUE) : TRUE;

				(level = 2) & (button = FALSE) & ((location = second) & (moving = idle) | (location = first-and-half) & (moving = up) | (location = second-and-half) & (moving = down)) : FALSE;
				(level = 2) & (button = FALSE) : {TRUE, FALSE};
				(level = 2) & (button = TRUE) & ((location = first-and-half) & (moving = up) | (location = second-and-half) & (moving = down)) : FALSE;
				(level = 2) & (button = TRUE) : TRUE;

				(level = 3) & (button = FALSE) & ((location = third) & (moving = idle) | (location = second-and-half) & (moving = up)) : FALSE;
				(level = 3) & (button = FALSE) : {TRUE, FALSE};
				(level = 3) & (button = TRUE) & (location = second-and-half) & (moving = up) : FALSE;
				(level = 3) & (button = TRUE) : TRUE;
				
				TRUE : button;
			esac;


MODULE elevator(moving, location, open, request)
	VAR
		button1 : boolean;
		button2 : boolean;
		button3 : boolean;
		open-button : boolean;

	ASSIGN
		init(open-button) := FALSE;
		init(button1) := FALSE;
		init(button2) := FALSE;
		init(button3) := FALSE;

		next(button1) := 
			case
				(button1 = FALSE) & (location = third) & (request = norequest) : {TRUE, FALSE};
				(button1 = FALSE) & (location = second) & (request = norequest) : {TRUE, FALSE};
				(button1 = TRUE) & (location = first-and-half) & (moving = down) : FALSE;
				TRUE : button1;
			esac;

		next(button2) := 
			case
				(button2 = FALSE) & (location = third) & (request = norequest) : {TRUE, FALSE};
				(button2 = FALSE) & (location = first) & (request = norequest) : {TRUE, FALSE};
				(button2 = TRUE) & ((location = first-and-half) & (moving = up) | (location = second-and-half) & (moving = down)) : FALSE;
				TRUE : button2;
			esac;

		next(button3) := 
			case
				(button3 = FALSE) & (location = first) & (request = norequest) : {TRUE, FALSE};
				(button3 = FALSE) & (location = second) & (request = norequest) : {TRUE, FALSE};
				(button3 = TRUE) & (location = second-and-half) & (moving = up) : FALSE;
				TRUE : button3;
			esac;

		next(open-button) :=
			case
				(open-button = FALSE) & (request = norequest) : {TRUE, FALSE};
				(open-button = TRUE) : FALSE;
				TRUE : open-button;
			esac;

		next(location) := 
			case
				(moving = up) & (location = first) : first-and-half;
				(moving = up) & (location = first-and-half) : second;
				(moving = up) & (location = second) : second-and-half;
				(moving = up) & (location = second-and-half) : third;

				(moving = down) & (location = third) : second-and-half;
				(moving = down) & (location = second-and-half) : second;
				(moving = down) & (location = second) : first-and-half;
				(moving = down) & (location = first-and-half) : first;

				TRUE : location;
			esac;

		next(moving) := 
			case
				(moving = idle) & (open-button = FALSE) & ((request = uprequest2) | (request = uprequest3)) : up;
				(moving = idle) & (open-button = FALSE) & ((request = downrequest2) | (request = downrequest1)) : down;
				(moving = up) & (request = uprequest2) & (location = first-and-half) : idle;
				(moving = up) & (request = uprequest3) & (location = second-and-half) : idle;
				(moving = up) & (request = uprequest3) & (location = first-and-half) : idle;

				(moving = down) & (request = downrequest2) & (location = second-and-half) : idle;
				(moving = down) & (request = downrequest1) & (location = second-and-half) : idle;
				(moving = down) & (request = downrequest1) & (location = first-and-half) : idle;

				TRUE : moving;
			esac;

		next(open) := 
			case
				(open = TRUE) & (open-button = FALSE) & ((request = uprequest2) | (request = uprequest3)) : FALSE;
				(open = TRUE) & (open-button = FALSE) & ((request = downrequest2) | (request = downrequest1)) : FALSE;

				(open = FALSE) & (request = uprequest2) & (location = first-and-half) : TRUE;
				(open = FALSE) & (request = uprequest3) & (location = second-and-half) : TRUE;
				(open = FALSE) & (request = uprequest3) & (location = first-and-half) : TRUE;

				(open = FALSE) & (request = downrequest2) & (location = second-and-half) : TRUE;
				(open = FALSE) & (request = downrequest1) & (location = second-and-half) : TRUE;
				(open = FALSE) & (request = downrequest1) & (location = first-and-half) : TRUE;

				TRUE : open;
			esac;

	FAIRNESS (open-button = FALSE);